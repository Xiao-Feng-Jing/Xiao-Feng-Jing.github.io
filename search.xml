<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2021/10/28/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>双重校验锁的优化</title>
    <url>/2021/10/29/%E5%8F%8C%E9%87%8D%E6%A0%A1%E9%AA%8C%E9%94%81%E7%9A%84%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h1 id="双重校验锁-检查锁定优化"><a href="#双重校验锁-检查锁定优化" class="headerlink" title="双重校验锁/检查锁定优化"></a>双重校验锁/检查锁定优化</h1><ul>
<li><a href="#%E5%8F%8C%E9%87%8D%E6%A3%80%E6%9F%A5%E9%94%81%E5%AE%9A%E7%9A%84%E7%94%B1%E6%9D%A5">双重检查锁定的由来</a></li>
<li><a href="#%E9%97%AE%E9%A2%98%E7%9A%84%E6%A0%B9%E6%BA%90">问题的根源</a></li>
<li><a href="#%E5%9F%BA%E4%BA%8Evolatile%E7%9A%84%E4%BC%98%E5%8C%96%E6%96%B9%E6%A1%88">基于volatile的优化方案</a></li>
<li><a href="#%E5%9F%BA%E4%BA%8E%E7%B1%BB%E5%88%9D%E5%A7%8B%E5%8C%96%E7%9A%84%E4%BC%98%E5%8C%96%E6%96%B9%E6%A1%88">基于类初始化的优化方案</a></li>
</ul>
<span id="more"></span>

<h2 id="双重检查锁定的由来"><a href="#双重检查锁定的由来" class="headerlink" title="双重检查锁定的由来"></a>双重检查锁定的由来</h2><p>在Java程序中，有时候需要推迟一些高开销的对象初始化操作，并且只有在需要使用这些对象的时候才进行初始化操作。为此，我们采用了延迟初始化方案（懒汉单例模式），但是在多线程的环境下，我们需要一些技巧来保证线程的安全性，否则容易出问题。如下示例是非线程安全的延迟初始化操作。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">    <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;					<span class="comment">//1. A线程执行</span></span><br><span class="line">      instance = <span class="keyword">new</span> Singleton();				<span class="comment">//1. B线程执行</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到，当线程A执行代码1时，B线程正在执行代码2，这时A线程可能会看到instance引用对象还没又完成初始化，导致生成多个实例。</p>
<p>对于这种情况我们可以采用同步的方案来实现线程安全的延迟初始化。示例如下。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">    <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;		  </span><br><span class="line">      instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于我们对于getInstance()方法进行了同步处理，将会导致性能开销。如果该方法被多线程频繁的调用，将会导致程序性能下降。反之，该方案将会提供令人满意的性能。</p>
<p>为了降低在多线程的情况下的开销，先辈们想出了一个“聪明”的办法：双重检查锁定（Double-Checked Locking）。下面是双重检查锁定的示例代码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;						<span class="comment">//1</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;				<span class="comment">//2</span></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;			<span class="comment">//3</span></span><br><span class="line">    <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;					<span class="comment">//4: 第一次检查</span></span><br><span class="line">      <span class="keyword">synchronized</span> (Singleton) &#123;				<span class="comment">//5：加锁</span></span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;					<span class="comment">//6：第二次检查</span></span><br><span class="line">          instance = <span class="keyword">new</span> Singleton();				<span class="comment">//7：问题的根源</span></span><br><span class="line">        &#125;							<span class="comment">//8</span></span><br><span class="line">      &#125;								<span class="comment">//9</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance;						<span class="comment">//10</span></span><br><span class="line">  &#125;								<span class="comment">//11</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过上述代码，我们可以知道，如果第一次检查instance不为null，那么就不需要执行下面的加锁和初始化了。可以大幅度降低synchronized带来的性能开销。</p>
<p>似乎上述代码很完美了，但是这是错误的优化。在线程执行到代码4时，代码读取到instance不为null时，instance引用对象可能还没有完成初始化。</p>
<h2 id="问题的根源"><a href="#问题的根源" class="headerlink" title="问题的根源"></a>问题的根源</h2><p>在双重检查锁定的代码中代码7创建了一个对象，它可以分解为以下几行伪代码。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">memory = allocate();			//1：分配对象的内存空间</span><br><span class="line">ctorInstance(memory);			//2：初始化对象</span><br><span class="line">instance = memory;			//3：设置instance指向刚刚分配的内存地址</span><br></pre></td></tr></table></figure>

<p>上述代码中的2和3可能会进行重排序。排序后如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">memory = allocate();			//1：分配对象的内存空间</span><br><span class="line">instance = memory;			//3：设置instance指向刚刚分配的内存地址，但是此时并没有完成初始化</span><br><span class="line">ctorInstance(memory);			//2：初始化对象</span><br></pre></td></tr></table></figure>

<p>根据Java语言规范，我们可以知道所有线程在执行Java程序时必须要遵守intra-thread semantics。intra-thread semantics保证重排序后不会改变单线程中的执行结果。也就是说，intra-thread semantics允许那些在单线程中不改变结果的重排序。所以上述排序是被允许的。</p>
<p>多线程中上述代码的执行时序图。</p>
<p><img src="https://xiaofengjing-blog.oss-cn-beijing.aliyuncs.com/image/202110291920377.png"></p>
<center style = "font-size: 14px">图 1 多线程执行时序图</center>

<p>由于单线程内要遵守intra-thread semantics，从而保证A线程的执行结果不会发生改变。但是在上图中B线程将会看到一个没有被初始化的对象。</p>
<p>通过上文的分析，我们可以知道在双重检查锁定的示例代码中如果代码7处发生了重排序，那么另一个线程就可能在代码4处判断instance不为null。然后线程B将会访问instance所引用的对象，但是此时该对象并未初始化完成！</p>
<p>如此，我们知晓了问题的根源，那么我们就可以通过两个方法来实现线程安全的延迟初始化。</p>
<ol>
<li>不允许2和3进行重排序。</li>
<li>允许2和3进行重排序，但是不允许其他线程“看到”这个重排序。</li>
</ol>
<h2 id="基于volatile的优化方案"><a href="#基于volatile的优化方案" class="headerlink" title="基于volatile的优化方案"></a>基于volatile的优化方案</h2><p>通过使用volatile关键字禁止重排序实现优化。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;						</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton instance;				</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;			</span><br><span class="line">    <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;					</span><br><span class="line">      <span class="keyword">synchronized</span> (Singleton) &#123;				</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;					</span><br><span class="line">          instance = <span class="keyword">new</span> Singleton();				</span><br><span class="line">        &#125;							</span><br><span class="line">      &#125;								</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance;						</span><br><span class="line">  &#125;								</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当声明对象的引用为volatile后，重排序将会被禁止。线程执行时序图如下。</p>
<p><img src="https://xiaofengjing-blog.oss-cn-beijing.aliyuncs.com/image/202110292256594.png"></p>
<center style  = "font-size:14px;">图 2多线程执行时序图</center>

<h2 id="基于类初始化的优化方案"><a href="#基于类初始化的优化方案" class="headerlink" title="基于类初始化的优化方案"></a>基于类初始化的优化方案</h2><p>JVM在类初始化阶段（即在Class被加载后，且被线程使用之前），会执行类的初始化。在执行类的初始化期间，JVM会获取一个锁。这个锁可以同步多个线程对同一个类的初始化。</p>
<p>基于这个特性，可以实现另一种线程安全的延迟初始化方案（Initialization On Demand Holder idiom）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;		</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InstanceHolder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;			</span><br><span class="line">    <span class="keyword">return</span> InstanceHolder.instance;			<span class="comment">//这里将导致instanceHolder类被初始化</span></span><br><span class="line">  &#125;								</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>假如两个线程并发执行getInstance()方法，下面将会是执行的示意图。</p>
<p><img src="https://xiaofengjing-blog.oss-cn-beijing.aliyuncs.com/image/202110292332137.png"></p>
<center style = "font-size:14px;">图 3 两个线程并发执行的意图</center>

<p>这个方案的实质是重排序，但是不允许非构造线程“看到”这个重排序。</p>
<p>由于上述方案是基于类初始来完成的，那么我们来了解一下初始化的过程。</p>
<p>初始化一个类，包括执行该类的静态初始化和初始化在这个类中声明的静态字段。根据Java语言规范，在首次发生下列任意一种情况时，一个类或接口类型T将立即初始化。</p>
<ol>
<li>T是一个类，而且一个T类型的实例被创建。</li>
<li>T是一个类，且T中声明的一个静态方法被调用。</li>
<li>T中声明的一个静态字段被赋值。</li>
<li>T中声明的一个静态字段被使用 ，而且这个字段不是一个常量字段。</li>
<li>T是一个顶级类，而且一个断言语句嵌套在T内部被执行。</li>
</ol>
<p>在类初始化方案中，首次执行getInstance()方法的线程将导致InstanceHolder类被初始化。由于Java语言是多线程的，多线程可能在同一时刻尝试去初始化同一个类或接口。因此，在Java中初始化一个类或接口时，需要进行细致的同步处理。</p>
<p>Java语言规范规定，对于每一个类或接口，都有一个唯一的初始化锁LC与之对应。JVM在类初始化期间会获取这个初始化锁，并且每个线程至少获取一次锁来确保该类已经被初始化过了。</p>
<p>对于类或接口的初始化，Java语言规范制定了精巧 而复杂的类初始化处理过程。我们可以简略的将整个过程看作以下5个阶段（这只是本人的一些看法）。</p>
<ol>
<li><p><strong>通过在Class对象上同步（即获取class对象的初始化锁），来控制类或接口的初始化。这个获取锁的线程会一直等待，直到当前线程能够获取到这个初始化锁。</strong></p>
<p>假设Class对象没有被初始化（初始化对象state被标记为noInitialization），且有两个线程A和B试图同时初始化该对象。示意图如下。</p>
<p><img src="https://xiaofengjing-blog.oss-cn-beijing.aliyuncs.com/image/202110301658114.png"></p>
<center style = "font-size:14px;">图 4 类初始化第一阶段</center>

<p>表1是该图的说明</p>
<center style = "font-size:14px;">表 1 类初始化第一阶段的执行时序表</center>
<table>
<thead>
<tr>
<th>时间</th>
<th>线程A</th>
<th>线程B</th>
</tr>
</thead>
<tbody><tr>
<td>T1</td>
<td>A1：尝试获取class对象的初始化锁。这里假设线程A获取到了初始化锁</td>
<td>B1：尝试获取class对象的初始化锁。由于线程A获取到了锁，线程B将会一直等待获取初始化锁</td>
</tr>
<tr>
<td>T2</td>
<td>A2：线程A看到线程还未初始化（因为读取到state = noInitialization）,线程设置state = initializing</td>
<td></td>
</tr>
<tr>
  <td>T3</td>
  <td>A3：线程A释放初始化锁</td>
  <td></td>
</tr>
</tbody></table></li>
<li><p><strong>线程A执行类的初始化，同时线程B在初始化锁对应的condition上等待。</strong></p>
<p><img src="https://xiaofengjing-blog.oss-cn-beijing.aliyuncs.com/image/202110301732670.png"></p>
<center style = "font-size:14px;">图 5 类初始化第二阶段</center>

<p>表2是该图的说明</p>
<center style = "font-size:14px;">表 2 类初始化第二阶段的执行时序表</center>
<table>
<thead>
<tr>
<th>时间</th>
<th>线程A</th>
<th>线程B</th>
</tr>
</thead>
<tbody><tr>
<td>T1</td>
<td>A1：执行类的静态初始化和初始化类中声明的静态字段</td>
<td>B1：获取到初始化锁</td>
</tr>
<tr>
<td>T2</td>
<td></td>
<td>B2：读取到 state = initializing</td>
</tr>
<tr>
  <td>T3</td>
  <td></td>
  <td>B3：释放初始化锁</td>
</tr>
<tr>
<td>T4</td>
<td></td>
<td>B4：在初始化锁的condition中等待</td>
</tr>
</tbody></table></li>
<li><p><strong>线程A设置state为initialized，然后唤醒在condition中等待的所有线程。</strong></p>
<p><img src="https://xiaofengjing-blog.oss-cn-beijing.aliyuncs.com/image/202110301735692.png"></p>
<center style = "font-size:14px;">图 6 类初始化第三阶段</center>

<p>表3是该图的说明</p>
<center style = "font-size:14px;">表 3 类初始化第三阶段的执行时序表</center>
<table>
<thead>
<tr>
<th>时间</th>
<th>线程A</th>
</tr>
</thead>
<tbody><tr>
<td>T1</td>
<td>A1：获取初始化锁</td>
</tr>
<tr>
<td>T2</td>
<td>A2：读取的 state = initialized</td>
</tr>
<tr>
  <td>T3</td>
  <td>A3：唤醒在condition中等待的所有线程</td>
</tr>
<tr>
<td>T4</td>
<td>A4：释放初始化锁</td>
</tr>
<tr>
<td>T5</td>
<td>A4：线程A的初始化处理过程完毕</td>
</tr>
</tbody></table></li>
</ol>
<ol start="4">
<li><p><strong>线程B结束类的初始化处理。</strong></p>
<p><img src="https://xiaofengjing-blog.oss-cn-beijing.aliyuncs.com/image/202110301736262.png"></p>
<center style = "font-size:14px;">图 7 类初始化第四阶段</center>

<p>表4是该图的说明</p>
<center style = "font-size:14px;">表 4 类初始化第四阶段的执行时序表</center>
<table>
<thead>
<tr>
<th>时间</th>
<th>线程B</th>
</tr>
</thead>
<tbody><tr>
<td>T1</td>
<td>B1：获取初始化锁</td>
</tr>
<tr>
<td>T2</td>
<td>B2：读取的 state = initialized</td>
</tr>
<tr>
<td>T3</td>
<td>B3：释放初始化锁</td>
</tr>
<tr>
<td>T4</td>
<td>B4：线程B的初始化处理过程完毕</td>
</tr>
</tbody></table></li>
<li><p><strong>线程C执行类的初始化的处理</strong></p>
<p><img src="https://xiaofengjing-blog.oss-cn-beijing.aliyuncs.com/image/202110301737477.png"></p>
<center style = "font-size:14px;">图 8 类初始化第五阶段</center>

<p>表5是该图的说明</p>
<center style = "font-size:14px;">表 5 类初始化第五阶段的执行时序表</center>

<table>
<thead>
<tr>
<th>时间</th>
<th>线程C</th>
</tr>
</thead>
<tbody><tr>
<td>T1</td>
<td>C1：获取初始化锁</td>
</tr>
<tr>
<td>T2</td>
<td>C2：读取的 state = initialized</td>
</tr>
<tr>
<td>T3</td>
<td>C3：释放初始化锁</td>
</tr>
<tr>
<td>T4</td>
<td>C4：线程C的初始化处理过程完毕</td>
</tr>
</tbody></table>
</li>
</ol>
<blockquote>
  对比两种对于双重检查锁定的优化方案，我们可以发现基于类初始化的方案更加简洁。但是基于volatile的方案除了能够对于静态字段实现延迟初始化外，还能对实例字段实现延迟初始化。<br />
  字段的延迟初始化降低了初始化类或创建实例的开销，但是增加了访问被延迟初始化的字段的开销。所以在大多数时候正常的初始化要优先于延迟初始化。<br />
  使用场景：需要对于实例字段使用线程安全的延迟初始化推荐volatile方案，而需要对于静态字段使用线程安全的延迟初始化推荐类初始化方案。<br />
  参考资料：《Java并发编程的艺术》
</blockquote>

]]></content>
      <categories>
        <category>Java基础</category>
        <category>多线程</category>
      </categories>
      <tags>
        <tag>JAVA基础</tag>
      </tags>
  </entry>
</search>
